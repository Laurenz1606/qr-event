const defaultsdeep = require("lodash.defaultsdeep");
const jwt = require("jsonwebtoken");
const { getprop, setprop } = require("varkeeper")

let useEvents = {};
let onEvents = [];

//overwrite config values via lodash.defaultsdeep
function setConfig(userConfig = {}) {
  setprop("config", defaultsdeep(userConfig, getprop("config")));
}

//check if given mail is vaild formatted
function validateEmail(email) {
  const re =
    /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(String(email).toLowerCase());
}

//check if password meets following criteria:
// - min. 1 uppercase letter
// - min. 1 lowercase letter
// - min. 1 number
// - min. 1 special char
// - min. 8 chars total
function validatePassword(password) {
  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9]).{8,}$/;
  return re.test(password);
}

//generate jwt accesToken with expiring date and data
function generateAccessToken(data) {
  return jwt.sign(data, getprop("config").jwt.ACCESS_TOKEN_SECRET, {
    expiresIn: getprop("config").jwt.EXPIRESIN + "s",
  });
}

//check for strictHTTP and send error response (err, code, errmsg)
function sendError(code, res) {
  let httpCode = getprop("config").strictHTTP ? getprop("config").errors[code].http : 200;
  return res.status(httpCode).json({
    err: true,
    code: code,
    errmsg: getprop("config").errors[code].msg,
  });
}

//send response with (err, code and all passed data)
function sendData(code, res, data) {
  return res.status(getprop("config").errors[code].http).json({
    err: false,
    code: code,
    ...data,
  });
}

//store return event(useEvent) with callback in useEvents
async function use(name, callback) {
  useEvents[name] = callback;
}

//store normal event(onEvent) with callback in onEvents
function on(name, callback) {
  onEvents.push({ name: name, callback: callback });
}

//run callback of eventName with values and return its callbacks return value
async function useTrigger(eventName, ...values) {
  let callback = useEvents[eventName];
  if (callback === undefined) callback = () => [true, null];
  return await callback(...values);
}

//run callback eventName with values
function onTrigger(eventName, ...values) {
  onEvents
    .filter((event) => eventName === event.name)
    .forEach((event) => event.callback(...values));
}

module.exports = {
  setConfig: setConfig,
  validateEmail: validateEmail,
  validatePassword: validatePassword,
  generateAccessToken: generateAccessToken,
  sendError: sendError,
  sendData: sendData,
  use: use,
  on: on,
  useTrigger: useTrigger,
  onTrigger: onTrigger
}