const { generateAccessToken, onTrigger, useTrigger, sendData, sendError } = require("../utils")
const jwt = require("jsonwebtoken")
const { getprop } = require("varkeeper")

module.exports = async (req, res) => {
  //create refreshToken shorthand for req.body.refreshToken
  const refreshToken = req.body.refreshToken;

  //send error if refreshToken does not exist (e.g. invalid format)
  if (!refreshToken) return sendError(1, res);

  //trigger "check-token" to see if the refreshToken exists on the server
  const [tokenserr, inrefreshTokens] = await useTrigger(
    "check-token",
    refreshToken
  );

  //send error if an error occured in "check-token"
  if (tokenserr) return sendError(5, res);

  //send error if refreshToken does not exits on server
  if (!inrefreshTokens) return sendError(2, res);

  //verify the refreshToken
  jwt.verify(refreshToken, getprop("config").jwt.REFRESH_TOKEN_SECRET, (err, user) => {
    //send error if the refreshToken verification failed
    if (err) return sendError(3, res);

    //generate accessToken and refreshToken
    const tokendata = { name: user.name, mail: user.mail, id: user.id };
    const accessToken = generateAccessToken(tokendata);

    //trigger "refresh" event with the tokendata (user informations)
    onTrigger("refresh", tokendata);

    //send new accessToken to the client
    return sendData(0, res, { accessToken: accessToken });
  });
}