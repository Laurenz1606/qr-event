const { onTrigger, useTrigger, sendData, sendError } = require("../utils")
const jwt = require("jsonwebtoken")
const { getprop } = require("varkeeper")

//check the accessToken and refreshToken from the user
module.exports = async (req, res) => {
  //make accessToken/refreshToken shorthands for req.body.accessToken/req.body.refreshToken
  const accessToken = req.body.accessToken;
  const refreshToken = req.body.refreshToken;

  //send error if there is no token
  if (!refreshToken || !accessToken) return sendError(1, res);

  //trigger "check-token" to see if token existed on the server
  const [tokenserr, inrefreshTokens] = await useTrigger(
    "check-token",
    refreshToken
  );

  //send error if an error occured in "check-token"
  if (tokenserr) return sendError(5, res);

  //send an error if token does not exist on server
  if (!inrefreshTokens) return sendError(2, res);

  //verify the refreshToken
  jwt.verify(refreshToken, getprop("config").jwt.REFRESH_TOKEN_SECRET, (err) => {
    //send error if the refreshToken verification failed
    if (err) return sendError(3, res);

    //verify the accessToken
    jwt.verify(accessToken, getprop("config").jwt.ACCESS_TOKEN_SECRET, (err, data) => {
      //send error if the accessToken verification failed
      if (err) return sendError(4, res);

      //trigger "check" with the user data from the accessToken
      onTrigger("check", data);

      //send data with the seconds till the tokens expiration date
      return sendData(0, res, {
        seconds: data.exp - parseInt(+new Date() / 1000),
      });
    });
  });
}