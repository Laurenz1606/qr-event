const { onTrigger, useTrigger, sendError, validateEmail,  validatePassword } = require("../utils")
const login = require("./login")
const bcrypt = require("bcrypt")

//register a user and login in the user if register is successfull
module.exports = async (req, res) => {
  //trigger events "check-nameused" and "check-mailused" for checking if mail and name are alredy used in the db
  let namerr, NAMEUSED, mailerr, MAILUSED;
  [namerr, NAMEUSED] = await useTrigger("check-nameused", req.body.name);
  [mailerr, MAILUSED] = await useTrigger("check-mailused", req.body.mail);

  //send error when something fails while checking the name and mail
  if (namerr || mailerr) return sendError(5, res);
  
  //send error if the email is not in a valid format
  if (!validateEmail(req.body.mail)) return sendError(21, res);
  
  //send error if the name is alredy used
  if (NAMEUSED) return sendError(22, res);
  
  //send error if the mail is alredy used
  if (MAILUSED) return sendError(23, res);
  
  //send error if the password does not meet the rules from validatePassword()
  if (!validatePassword(req.body.password)) return sendError(24, res);
  try {
    //hash password and trigger "store-user" event
    const hashedPassword = await bcrypt.hash(req.body.password, 10);
    const [err, newUser] = await useTrigger("store-user", {
      mail: req.body.mail,
      name: req.body.name,
      hashedPassword: hashedPassword,
    });

    //send error if "store-user" has failed
    if (err) return sendError(5, res);

    //trigger "register" onEvent with user information (newUser)
    onTrigger("register", newUser);

    //log the new created user in
    login(req, res);
  } catch (err) {
    //send error if any errors occured while hashing the password
    return sendError(5, res);
  }
}