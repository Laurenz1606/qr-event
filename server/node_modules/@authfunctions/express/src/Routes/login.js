const { onTrigger, useTrigger, sendData, sendError, generateAccessToken } = require("../utils")
const bcrypt = require("bcrypt")
const jwt = require("jsonwebtoken")
const { getprop } = require("varkeeper")

//login a user
module.exports = async (req, res) => {
  //set password shorthand for req.body.password
  const password = req.body.password;
  let usererr, user;

  //get user by name if name is defined
  if (req.body.name)
    [usererr, user] = await useTrigger("getuser-name", req.body.name);
  //get user by mail if mail is defined and no user was found with name
  if (req.body.mail && !user)
    [usererr, user] = await useTrigger("getuser-mail", req.body.mail);

  //send error if useTrigger returns an error (if something in the useTrigger callback throws an error)
  if (usererr) return sendError(5, res);

  //send error if user does not exist
  if (!user) return sendError(11, res);

  try {
    //compare given password to the users hashedPassword
    //    when password does not match sendError
    if (!(await bcrypt.compare(password, user.hashedPassword)))
      return sendError(12, res);

    //    else (when password does match) generate accessToken and refreshToken
    const tokendata = { name: user.name, mail: user.mail, id: user.id };
    const accessToken = generateAccessToken(tokendata);
    const refreshToken = jwt.sign(tokendata, getprop("config").jwt.REFRESH_TOKEN_SECRET);

    //trigger "store-token" to store the users refreshtoken
    const [err] = await useTrigger("store-token", refreshToken);

    //send error if storing the token failed
    if (err) return sendError(5, res);

    //trigger event that a user has loged in, with the user data (tokendata)
    onTrigger("login", tokendata);

    //send accessToken and refreshToken to client for login
    return sendData(10, res, {
      accessToken: accessToken,
      refreshToken: refreshToken,
    });
  } catch(err) {
    //send error if something in try failed
    return sendError(5, res);
  }
}
